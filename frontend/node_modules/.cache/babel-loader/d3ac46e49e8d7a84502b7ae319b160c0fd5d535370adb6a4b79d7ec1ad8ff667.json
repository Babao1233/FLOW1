{"ast":null,"code":"/**\n * Service xử lý các tính năng tài khoản người dùng\n * Cung cấp các phương thức gọi API cho tính năng quản lý tài khoản\n */\n\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Tạo instance axios với các cấu hình mặc định\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Quan trọng để gửi cookie trong yêu cầu CORS\n});\n\n// Intercept response để xử lý lỗi\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response2$data;\n  const customError = {\n    statusCode: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 500,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Đã xảy ra lỗi, vui lòng thử lại sau.'\n  };\n  return Promise.reject(customError);\n});\n\n/**\n * Service quản lý hồ sơ người dùng\n */\nconst profileService = {\n  /**\n   * Lấy thông tin hồ sơ người dùng\n   * @returns {Promise} Thông tin người dùng\n   */\n  getProfile: async () => {\n    const response = await apiClient.get('/user/profile');\n    return response.data;\n  },\n  /**\n   * Cập nhật thông tin hồ sơ người dùng\n   * @param {Object} profileData - Dữ liệu hồ sơ cần cập nhật\n   * @returns {Promise} Thông tin người dùng sau khi cập nhật\n   */\n  updateProfile: async profileData => {\n    const response = await apiClient.put('/user/profile', profileData);\n    return response.data;\n  },\n  /**\n   * Thay đổi mật khẩu\n   * @param {Object} passwordData - Dữ liệu mật khẩu cũ và mới\n   * @returns {Promise} Kết quả thay đổi mật khẩu\n   */\n  changePassword: async passwordData => {\n    const response = await apiClient.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n  /**\n   * Yêu cầu khôi phục mật khẩu\n   * @param {string} email - Email của tài khoản cần khôi phục mật khẩu\n   * @returns {Promise} Kết quả yêu cầu\n   */\n  requestPasswordReset: async email => {\n    const response = await apiClient.post('/auth/request-reset', {\n      email\n    });\n    return response.data;\n  },\n  /**\n   * Xác minh mã khôi phục mật khẩu\n   * @param {string} code - Mã xác minh\n   * @returns {Promise} Kết quả xác minh\n   */\n  verifyResetCode: async code => {\n    const response = await apiClient.post('/auth/verify-reset-code', {\n      code\n    });\n    return response.data;\n  },\n  /**\n   * Đặt lại mật khẩu mới\n   * @param {Object} resetData - Dữ liệu đặt lại mật khẩu\n   * @returns {Promise} Kết quả đặt lại mật khẩu\n   */\n  resetPassword: async resetData => {\n    const response = await apiClient.post('/auth/reset-password', resetData);\n    return response.data;\n  }\n};\n\n/**\n * Service quản lý địa chỉ\n */\nconst addressService = {\n  /**\n   * Lấy danh sách địa chỉ\n   * @returns {Promise} Danh sách địa chỉ\n   */\n  getAddresses: async () => {\n    const response = await apiClient.get('/user/addresses');\n    return response.data;\n  },\n  /**\n   * Thêm địa chỉ mới\n   * @param {Object} addressData - Dữ liệu địa chỉ\n   * @returns {Promise} Địa chỉ sau khi thêm\n   */\n  addAddress: async addressData => {\n    const response = await apiClient.post('/user/addresses', addressData);\n    return response.data;\n  },\n  /**\n   * Cập nhật địa chỉ\n   * @param {number} id - ID địa chỉ\n   * @param {Object} addressData - Dữ liệu địa chỉ\n   * @returns {Promise} Địa chỉ sau khi cập nhật\n   */\n  updateAddress: async (id, addressData) => {\n    const response = await apiClient.put(`/user/addresses/${id}`, addressData);\n    return response.data;\n  },\n  /**\n   * Xóa địa chỉ\n   * @param {number} id - ID địa chỉ\n   * @returns {Promise} Kết quả xóa\n   */\n  deleteAddress: async id => {\n    const response = await apiClient.delete(`/user/addresses/${id}`);\n    return response.data;\n  },\n  /**\n   * Đặt địa chỉ mặc định\n   * @param {number} id - ID địa chỉ\n   * @returns {Promise} Địa chỉ sau khi đặt mặc định\n   */\n  setDefaultAddress: async id => {\n    const response = await apiClient.patch(`/user/addresses/${id}/set-default`);\n    return response.data;\n  }\n};\n\n/**\n * Service quản lý đơn hàng\n */\nconst orderService = {\n  /**\n   * Lấy danh sách đơn hàng\n   * @param {Object} params - Tham số lọc và phân trang\n   * @returns {Promise} Danh sách đơn hàng\n   */\n  getOrders: async (params = {}) => {\n    const response = await apiClient.get('/user/orders', {\n      params\n    });\n    return response.data;\n  },\n  /**\n   * Lấy chi tiết đơn hàng\n   * @param {number} id - ID đơn hàng\n   * @returns {Promise} Chi tiết đơn hàng\n   */\n  getOrderById: async id => {\n    const response = await apiClient.get(`/user/orders/${id}`);\n    return response.data;\n  },\n  /**\n   * Hủy đơn hàng\n   * @param {number} id - ID đơn hàng\n   * @param {string} reason - Lý do hủy\n   * @returns {Promise} Kết quả hủy đơn hàng\n   */\n  cancelOrder: async (id, reason) => {\n    const response = await apiClient.patch(`/user/orders/${id}/cancel`, {\n      reason\n    });\n    return response.data;\n  }\n};\n\n/**\n * Service quản lý sản phẩm yêu thích\n */\nconst wishlistService = {\n  /**\n   * Lấy danh sách sản phẩm yêu thích\n   * @returns {Promise} Danh sách sản phẩm yêu thích\n   */\n  getWishlist: async () => {\n    const response = await apiClient.get('/user/wishlist');\n    return response.data;\n  },\n  /**\n   * Thêm sản phẩm vào danh sách yêu thích\n   * @param {number} productId - ID sản phẩm\n   * @returns {Promise} Kết quả thêm\n   */\n  addToWishlist: async productId => {\n    const response = await apiClient.post('/user/wishlist', {\n      productId\n    });\n    return response.data;\n  },\n  /**\n   * Xóa sản phẩm khỏi danh sách yêu thích\n   * @param {number} productId - ID sản phẩm\n   * @returns {Promise} Kết quả xóa\n   */\n  removeFromWishlist: async productId => {\n    const response = await apiClient.delete(`/user/wishlist/${productId}`);\n    return response.data;\n  }\n};\n\n// Xuất các service\nexport const accountService = {\n  profile: profileService,\n  address: addressService,\n  order: orderService,\n  wishlist: wishlistService\n};\nexport default accountService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","withCredentials","interceptors","response","use","error","_error$response","_error$response2","_error$response2$data","customError","statusCode","status","message","data","Promise","reject","profileService","getProfile","get","updateProfile","profileData","put","changePassword","passwordData","post","requestPasswordReset","email","verifyResetCode","code","resetPassword","resetData","addressService","getAddresses","addAddress","addressData","updateAddress","id","deleteAddress","delete","setDefaultAddress","patch","orderService","getOrders","params","getOrderById","cancelOrder","reason","wishlistService","getWishlist","addToWishlist","productId","removeFromWishlist","accountService","profile","address","order","wishlist"],"sources":["C:/Users/AB/Downloads/FLOW1/frontend/src/services/accountService.js"],"sourcesContent":["/**\n * Service xử lý các tính năng tài khoản người dùng\n * Cung cấp các phương thức gọi API cho tính năng quản lý tài khoản\n */\n\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Tạo instance axios với các cấu hình mặc định\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Quan trọng để gửi cookie trong yêu cầu CORS\n});\n\n// Intercept response để xử lý lỗi\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const customError = {\n      statusCode: error.response?.status || 500,\n      message: error.response?.data?.message || 'Đã xảy ra lỗi, vui lòng thử lại sau.',\n    };\n    return Promise.reject(customError);\n  }\n);\n\n/**\n * Service quản lý hồ sơ người dùng\n */\nconst profileService = {\n  /**\n   * Lấy thông tin hồ sơ người dùng\n   * @returns {Promise} Thông tin người dùng\n   */\n  getProfile: async () => {\n    const response = await apiClient.get('/user/profile');\n    return response.data;\n  },\n\n  /**\n   * Cập nhật thông tin hồ sơ người dùng\n   * @param {Object} profileData - Dữ liệu hồ sơ cần cập nhật\n   * @returns {Promise} Thông tin người dùng sau khi cập nhật\n   */\n  updateProfile: async (profileData) => {\n    const response = await apiClient.put('/user/profile', profileData);\n    return response.data;\n  },\n\n  /**\n   * Thay đổi mật khẩu\n   * @param {Object} passwordData - Dữ liệu mật khẩu cũ và mới\n   * @returns {Promise} Kết quả thay đổi mật khẩu\n   */\n  changePassword: async (passwordData) => {\n    const response = await apiClient.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  /**\n   * Yêu cầu khôi phục mật khẩu\n   * @param {string} email - Email của tài khoản cần khôi phục mật khẩu\n   * @returns {Promise} Kết quả yêu cầu\n   */\n  requestPasswordReset: async (email) => {\n    const response = await apiClient.post('/auth/request-reset', { email });\n    return response.data;\n  },\n\n  /**\n   * Xác minh mã khôi phục mật khẩu\n   * @param {string} code - Mã xác minh\n   * @returns {Promise} Kết quả xác minh\n   */\n  verifyResetCode: async (code) => {\n    const response = await apiClient.post('/auth/verify-reset-code', { code });\n    return response.data;\n  },\n\n  /**\n   * Đặt lại mật khẩu mới\n   * @param {Object} resetData - Dữ liệu đặt lại mật khẩu\n   * @returns {Promise} Kết quả đặt lại mật khẩu\n   */\n  resetPassword: async (resetData) => {\n    const response = await apiClient.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n};\n\n/**\n * Service quản lý địa chỉ\n */\nconst addressService = {\n  /**\n   * Lấy danh sách địa chỉ\n   * @returns {Promise} Danh sách địa chỉ\n   */\n  getAddresses: async () => {\n    const response = await apiClient.get('/user/addresses');\n    return response.data;\n  },\n\n  /**\n   * Thêm địa chỉ mới\n   * @param {Object} addressData - Dữ liệu địa chỉ\n   * @returns {Promise} Địa chỉ sau khi thêm\n   */\n  addAddress: async (addressData) => {\n    const response = await apiClient.post('/user/addresses', addressData);\n    return response.data;\n  },\n\n  /**\n   * Cập nhật địa chỉ\n   * @param {number} id - ID địa chỉ\n   * @param {Object} addressData - Dữ liệu địa chỉ\n   * @returns {Promise} Địa chỉ sau khi cập nhật\n   */\n  updateAddress: async (id, addressData) => {\n    const response = await apiClient.put(`/user/addresses/${id}`, addressData);\n    return response.data;\n  },\n\n  /**\n   * Xóa địa chỉ\n   * @param {number} id - ID địa chỉ\n   * @returns {Promise} Kết quả xóa\n   */\n  deleteAddress: async (id) => {\n    const response = await apiClient.delete(`/user/addresses/${id}`);\n    return response.data;\n  },\n\n  /**\n   * Đặt địa chỉ mặc định\n   * @param {number} id - ID địa chỉ\n   * @returns {Promise} Địa chỉ sau khi đặt mặc định\n   */\n  setDefaultAddress: async (id) => {\n    const response = await apiClient.patch(`/user/addresses/${id}/set-default`);\n    return response.data;\n  },\n};\n\n/**\n * Service quản lý đơn hàng\n */\nconst orderService = {\n  /**\n   * Lấy danh sách đơn hàng\n   * @param {Object} params - Tham số lọc và phân trang\n   * @returns {Promise} Danh sách đơn hàng\n   */\n  getOrders: async (params = {}) => {\n    const response = await apiClient.get('/user/orders', { params });\n    return response.data;\n  },\n\n  /**\n   * Lấy chi tiết đơn hàng\n   * @param {number} id - ID đơn hàng\n   * @returns {Promise} Chi tiết đơn hàng\n   */\n  getOrderById: async (id) => {\n    const response = await apiClient.get(`/user/orders/${id}`);\n    return response.data;\n  },\n\n  /**\n   * Hủy đơn hàng\n   * @param {number} id - ID đơn hàng\n   * @param {string} reason - Lý do hủy\n   * @returns {Promise} Kết quả hủy đơn hàng\n   */\n  cancelOrder: async (id, reason) => {\n    const response = await apiClient.patch(`/user/orders/${id}/cancel`, { reason });\n    return response.data;\n  },\n};\n\n/**\n * Service quản lý sản phẩm yêu thích\n */\nconst wishlistService = {\n  /**\n   * Lấy danh sách sản phẩm yêu thích\n   * @returns {Promise} Danh sách sản phẩm yêu thích\n   */\n  getWishlist: async () => {\n    const response = await apiClient.get('/user/wishlist');\n    return response.data;\n  },\n\n  /**\n   * Thêm sản phẩm vào danh sách yêu thích\n   * @param {number} productId - ID sản phẩm\n   * @returns {Promise} Kết quả thêm\n   */\n  addToWishlist: async (productId) => {\n    const response = await apiClient.post('/user/wishlist', { productId });\n    return response.data;\n  },\n\n  /**\n   * Xóa sản phẩm khỏi danh sách yêu thích\n   * @param {number} productId - ID sản phẩm\n   * @returns {Promise} Kết quả xóa\n   */\n  removeFromWishlist: async (productId) => {\n    const response = await apiClient.delete(`/user/wishlist/${productId}`);\n    return response.data;\n  },\n};\n\n// Xuất các service\nexport const accountService = {\n  profile: profileService,\n  address: addressService,\n  order: orderService,\n  wishlist: wishlistService,\n};\n\nexport default accountService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}